// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VisentiaTwin_API.DataContexts;

#nullable disable

namespace VisentiaTwin_API.Migrations
{
    [DbContext(typeof(VTSystemContext))]
    partial class VTSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VisentiaTwin_API.DataModels.VTComponent", b =>
                {
                    b.Property<int>("VTComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VTComponentId"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Catergory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("estimatorString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("modelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VTComponentId");

                    b.ToTable("VTComponents");
                });

            modelBuilder.Entity("VisentiaTwin_API.DataModels.VTFileStorage", b =>
                {
                    b.Property<Guid>("VTFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VTFileId");

                    b.ToTable("VTFiles");
                });

            modelBuilder.Entity("VisentiaTwin_API.DataModels.VTNode", b =>
                {
                    b.Property<int>("VTNodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VTNodeId"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VTSystemId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VTNodeId");

                    b.HasIndex("VTSystemId");

                    b.ToTable("VTNodes");
                });

            modelBuilder.Entity("VisentiaTwin_API.DataModels.VTNodeComponent", b =>
                {
                    b.Property<int>("VTNodeId")
                        .HasColumnType("int");

                    b.Property<int>("VTComponentId")
                        .HasColumnType("int");

                    b.Property<bool>("isSelected")
                        .HasColumnType("bit");

                    b.Property<float>("posX")
                        .HasColumnType("real");

                    b.Property<float>("posY")
                        .HasColumnType("real");

                    b.Property<float>("posZ")
                        .HasColumnType("real");

                    b.Property<float>("rotX")
                        .HasColumnType("real");

                    b.Property<float>("rotY")
                        .HasColumnType("real");

                    b.Property<float>("rotZ")
                        .HasColumnType("real");

                    b.Property<float>("sclX")
                        .HasColumnType("real");

                    b.Property<float>("sclY")
                        .HasColumnType("real");

                    b.Property<float>("sclZ")
                        .HasColumnType("real");

                    b.HasKey("VTNodeId", "VTComponentId");

                    b.HasIndex("VTComponentId");

                    b.ToTable("VTNodeComponents");
                });

            modelBuilder.Entity("VisentiaTwin_API.DataModels.VTSystem", b =>
                {
                    b.Property<int>("SystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SystemId"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("estimatorString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemId");

                    b.ToTable("VTSystems");
                });

            modelBuilder.Entity("VisentiaTwin_API.DataModels.VTNode", b =>
                {
                    b.HasOne("VisentiaTwin_API.DataModels.VTSystem", "VTSystem")
                        .WithMany("VTNodes")
                        .HasForeignKey("VTSystemId");

                    b.Navigation("VTSystem");
                });

            modelBuilder.Entity("VisentiaTwin_API.DataModels.VTNodeComponent", b =>
                {
                    b.HasOne("VisentiaTwin_API.DataModels.VTComponent", "VTComponent")
                        .WithMany("VTNodeComponents")
                        .HasForeignKey("VTComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisentiaTwin_API.DataModels.VTNode", "VTNode")
                        .WithMany("VTNodeComponents")
                        .HasForeignKey("VTNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VTComponent");

                    b.Navigation("VTNode");
                });

            modelBuilder.Entity("VisentiaTwin_API.DataModels.VTComponent", b =>
                {
                    b.Navigation("VTNodeComponents");
                });

            modelBuilder.Entity("VisentiaTwin_API.DataModels.VTNode", b =>
                {
                    b.Navigation("VTNodeComponents");
                });

            modelBuilder.Entity("VisentiaTwin_API.DataModels.VTSystem", b =>
                {
                    b.Navigation("VTNodes");
                });
#pragma warning restore 612, 618
        }
    }
}
